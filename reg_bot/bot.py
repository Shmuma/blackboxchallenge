import interface as bbox
import numpy as np


def get_action_by_state(state):
    best_act = -1
    best_val = -1e9

    for act in xrange(n_actions):
        val = calc_reg_for_action(act, state)
        if val > best_val:
            best_val = val
            best_act = act

    return best_act



n_features = n_actions = -1
reg_coefs = np.array([[2.7089176029420887, 0.766413852942411, -0.2046622261884093, 0.38784525328204184, 1.2005007941402401, -0.5005854737690477, 0.03654565287355154, 1.4283482097286915, -1.1563096617730217, -0.3701607084664091, -0.07479003463401722, -0.5667275877839796, -1.851076423334248, 0.6270902154736598, 1.8004987688314127, 0.09909971934317763, 0.7663875447302793, -0.2292350868794455, -0.03895856336388053, 0.3619952769366645, 0.15882109407390949, -0.8345730642788783, 0.5805014395169555, -0.1501840148792508, -2.5038899569680853, 1.2884221317047067, -0.9498828617379217, -0.11272134890872153, 0.9782474025789754, -0.4435847298842549, 0.27237866752606055, -0.7932003780926892, 1.229395242182683, -0.5708338660943308, 0.17876194524508576, 8.99601326437698], [-0.6229280312567446, 1.0381641642644905, 0.30786109489769986, 0.5675161565694986, 1.3995881629762201, 0.6296862910309313, 0.033465117573218045, 1.6682370295811546, 0.05245757320287769, -1.059362811395634, -1.4670990008625986, -0.27270760217066653, -0.1629999959483686, 0.8892688357108487, -1.8997333597461257, 0.5439959183226964, -1.5262931409200953, 0.07575926254952461, -0.6695927176632528, -0.7606624688367871, -0.3526739496643299, 0.13347837091878634, 0.6376996503764414, -0.328873945568474, 0.9486157406482668, -1.0701761219995172, -0.25631922365290694, -0.884173459088364, 0.2759958888755554, -1.1130026394064623, -0.048316749317820616, -0.6905927053311605, -0.0871136588690739, 0.279469819409309, 0.0981600226403944, -45.04045803072943], [-2.7011188064772886, -3.4111096038109685, -1.7837656543058518, 1.3921247654344024, -1.014215819151288, 0.42996492979455175, -0.4553326827806112, -3.2422634328555007, 0.27683304343019505, 1.4203057659907015, -0.22718680807967156, 0.8290503712455348, 1.2781494810636034, -3.562699186890737, 1.9401277788103615, -1.4761303174090528, -0.5153656122785062, -2.0426502327275102, 0.21294320644965334, -0.49464501638066527, -0.33899685898839804, 0.1962518866115028, 1.2602109258255958, 0.552309875840987, -1.4126355267993234, 0.9879021613194082, -3.1451885124514956, -2.6648330894369856, 0.6583962012067089, 0.89119942679577, 1.8816898593972753, -0.07060999394579717, 0.4243951750381403, 0.3528622398968404, -0.21230493315500026, 33.78167275822672], [-0.4350815566678204, 0.45379335564250994, 0.08126031257030028, 1.6061383936745404, 1.0267522774340745, -0.15733773217121985, -0.7444750683086081, 0.7429885555724208, -0.3194198070882857, 0.18360704471705455, 0.08053368838154716, 1.9051621445586762, -0.9646398965403422, 4.548633606731093, 1.6069030905909854, -0.6704071351070238, -0.5503984593848831, 2.2592137743442136, 0.7667639949297224, -2.404123163119273, 0.47953804209846046, -0.007487008633047788, -1.8738677160435049, 0.23398412274770403, -1.433980348549478, 1.5362098990501358, -1.8039982053755519, -1.4105489658913126, 1.9088480482817953, -1.6805054205160175, 0.2301938067260432, 0.2296814270156683, -0.39747103868332734, 0.8772260602446903, 0.652619032263198, -7.814195950124186]])
free_coefs = np.array([0.03775204852606383, 0.832881038337442, 0.9278815691740366, -4.9184779281599456])

def prepare_bbox():
    global n_features, n_actions

    if bbox.is_level_loaded():
        bbox.reset_level()
    else:
        bbox.load_level("../levels/train_level.data", verbose=1)
        n_features = bbox.get_num_of_features()
        n_actions = bbox.get_num_of_actions()


#def load_regression_coefs(filename):
#	global reg_coefs, free_coefs
#	coefs = np.loadtxt(filename).reshape(n_actions, n_features + 1)
#	reg_coefs = coefs[:,:-1]
#	free_coefs = coefs[:,-1]


def calc_reg_for_action(action, state):
    return np.dot(reg_coefs[action], state) + free_coefs[action]


def run_bbox(verbose=False):
    has_next = 1

    prepare_bbox()
    #	load_regression_coefs("reg_coefs.txt")
    prev_score = bbox.get_score()
    steps = 0

    while has_next:
        state = bbox.get_state()
        action = get_action_by_state(state)
        has_next = bbox.do_action(action)
        score = bbox.get_score()
        prev_score = score
        steps += 1

    bbox.finish(verbose=1)
    print "Total score: %f" % prev_score
    print "Total steps: %d" % steps

if __name__ == "__main__":
    run_bbox()